内存分配
redis针对不同数据类型的大小限制：
1.String类型：一个String类型的value最大可以存储512M
2.List类型：list的元素个数最多2^32-1个，也就是4294867295个
3.Sets类型：元素个数最多为2^32-1个，也就是4294867295个
4.Hashs类型：键值对个数最多为2^32-1个，也就是4294867295个
通过配置文件配置最大阈值
maxmemory 最大内存阈值
maxmemory-policy 到达阈值的执行策略

内存压缩（redis内存不够时）
#配置字段最多512个
hash-max-zipmap-entries 512
#配置value最大为64字节
hash-max-zipmap-value 64
#配置元素个数最多为512个
list-max-ziplist-entries 512
#配置value最大为64字节
list-max-ziplist-value 64
大小超出压缩范围，溢出后Redis将自动将其转换为正常大小

过期数据的处理策略
主动处理（redis主动触发检查key是否过期）每秒执行10次。过程如下：
1.从具有相关过期的密钥集中测试20个随机密钥
2.删除找到的所有密钥已过期
3.如果超过25%的密钥已过期，请从步骤1重新开始
被动处理：
1.每次访问key的时候，发现超时后被动过期，清理掉

数据恢复阶段过期数据的处理策略
RDB方式：
过期的key不会被持久化到文件中
载入时过期的key，会通过redis的主动和被动方式清理掉
AOF方式：
当redis使用AOF方式持久化时，每次遇到过期的key redis会追加一条DEL命令道AOF文件，
也就是说只要我们顺序载入执行AOF命令文件就会删除过期的键
注意：过期数据的计算和计算机本身的时间是有直接联系的
原本日期为2.28结果恢复的时间为2.25，那么数据就可能存在，没有过期，因为数据库时间不对。因此数据库时间一定要实现同步

Redis内存回收策略
当内存不够用时的配置文件配置：
maxmemory-policy noeviction
动态调整：
config set maxmemory-policy noeviction

回收策略            说明
noeviction          客户端尝试执行会让更多内存被使用的命令直接报错
allkeys-lru         在所有key里执行LRU算法
volatile-lru        在所有已过期的key里执行LRU算法
volatile-lfu        使用过期集在密钥中使用近似LFU进行驱逐
allkeys-lfu         使用近似LFU逐出任何键
allkeys-random      在所有key里随机回收
volatile-random     在已经过期的key里随机回收
volatile-ttl        回收已经过期的key，并且优先回收存货时间（TTL）较短的键

LRU算法（Latest recently used，最近最少使用）：根据数据的历史访问记录来淘汰数据
核心思想：如果数据最近被访问过，那么将来被访问的几率也更高
注意：Redis的LRU算法并非完整的实现，完整的LRU实现是因为这需要太多的内存
方法：通过对少量keys进行取样（50%），然后回收其中一个最好的key
配置方式：maxmemory-samples 5

LFU算法（Least Frequently Used）根据数据的历史访问评论来淘汰数据
核心思想：如果数据过去被访问多次，那么将来被访问的频率也更高
Redis实现的是近似的实现，每次对key进行访问时，用基于概率的对数计数器里记录访问次数，同时这个计数器会随时间推移而减小
Morris counter算法依据：
https://en.wikipedia.org/wiki/Approximate_counting_algorithm
启用LFU算法后，可以使用热点数据分析功能。（redis-cli --hotkeys）

