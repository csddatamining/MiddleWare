什么是消息中间件（为什么要用它，核心组成部分）
协议，没有协议如何传输数据
持久化机制，某些mq不做持久化，因此需要选型
消息分发机制，推数据还是拉数据
高可用
高可靠

单体架构->分布式系统架构

消息中间件概述
什么是消息中间件
利用高效可靠消息传递机制进行平台无关的数据交流；
并基于数据通信来进行分布式系统的集成；
通过提供消息传递和消息排队模型，它可以在分布式环境下扩展进程间通信

消息中间件应用场景
跨系统数据传递、高并发流量削峰、数据异步处理等
常用的消息中间件
ActiveMQ、RabbitMQ、Kafka、RocketMQ

消息中间件核心设计
本质
一种具备接收请求、保存数据、发送数据等功能的网络应用。
和一般网络应用程序的区别是它主要负责数据的接收和传递，所以性能一般高于普通程序

既然是中间件，那么肯定有网络协议
协议是什么：协议是计算机之间通信时共同遵从的一组约定，都遵守相同的约定，计算机之间才能相互交流
是对数据格式和计算机之间交换数据时必须遵守的规则的正式描述
协议三要素：
1）语法：即数据与控制信息的结构或格式
2）语义：即需要发出何种控制信息，完成何种动作以及做出何种响应
3）时序（同步）：即时间实现顺序的详细说明

HTTP协议三要素举例：
语法：http规定了请求报文和响应报文的具体格式
语义：客户端主动发起的操作称为请求
时序：一个请求对应

消息中间件常用的协议：OpenWire（ActiveMQ）、AMQP、MQTT、Kafka、OpenMessage
为什么消息中间件不直接用Http协议？
1.Http内容多（请求报文，响应报文复杂，请求头，cookie..）,对于消息而言没有必要
2.消息单一，需要高性能，简洁，不能太大
3.http传递消息会中断

AMQP协议（Advanced Message Queuing Protocol）
高级消息队列协议，04年JPMorgan Chase（摩根大通集团）联合其他公司共同设计
特性：事务支持、持久化支持，出生金融行业，在可靠性消息处理上具备天然优势
RabbitMQ、Apache下的ActiveMQ实现了该协议

MQTT协议（Message Queuing Telemetry Transport）
消息队列遥测传输协议，是IBM开发的即时通讯协议，物联网系统架构中的重要组成部分
特性：轻量、结构简单、传输快、没有事务支持、没有持久化相关设计
应用场景：适用于计算能力有限、低带宽、网络不稳定的场景
RabbitMQ、Apache ActiveMQ

Open Message协议
近一两年由阿里发起，与雅虎、滴滴出行、Streamlio等公司共同参与创立的分布式消息中间件、流处理领域的应用开发标准
是国内首个在全球范围内发起的分布式消息领域国际标准
特性：结构简单、解析快、有事务设计、有持久化设计
Apache RocketMQ

Kafka协议
基于TCP的二进制协议。消息内部是通过长度来分隔，由一些基本数据类型组成
特性：结构简单、解析快、无事务设计、有持久化设计

持久化是什么
简单来说就是讲数据存入磁盘，而不是存在内存中随服务重启而消失，使数据能够永久保留叫做持久化

常用持久化方式
            ActiveMQ        RabbitMQ        Kafka       RocketMQ
文件系统     支持              支持            支持       支持
数据库       支持             /               /            /

消息分发
消息分发策略：重发、转发
常用消息中间件分发策略
            ActiveMQ    RabbitMQ    Kafka   RocketMQ
发布订阅     支持         支持        支持     支持
轮询分发     支持         支持        支持     /
公平分发     /           支持         /       /
重发         支持        支持        /       支持
消息拉取     /           支持         支持    支持

高可用机制
高可用性是指产品在规定的条件和规定的时刻或时间区间内处于可执行规定功能状态的能力
当业务量大时，一台消息中间件服务器可能无法满足需求，所以需要消息中间件能够集群部署，来达到高可用的目的

Master-Slave主从共享数据的部署方式（数据存放在一台主机，同一个数据源）
Master-Slave主从同步部署方式（数据同步到多个副本服务器，可解决负载均衡，但一般数据插入和修改在主服务器上进行，同步下会占用很大带宽）
Broker-Cluster多主集群同步部署方式（开放读写）
Broker-Cluster多主集群转发部署方式（转发请求，共享的是元数据）
Master-Slave与Broker-Cluster结合

高可靠
指系统可以无故障地可持续运行。比如一个系统从来不崩溃，报错，或者崩溃报错的几率较低，那就是高可靠
在高并发业务场景下，如果不能保证高可靠，那造成的损失将会非常严重
保证消息中间件的高可靠性，可以从下面几方面考虑
消息传输可靠性：通过协议来保证系统间数据解析的正确性
消息存储可靠：通过持久化来保证消息的存储可靠性
