一、ActiveMQ支持哪些协议
ActiveMQ支持多种协议传输和传输方式，允许客户端使用多种协议连接
ActiveMQ支持的协议：AUTO、OpenWire、AMQP、Stomp、MQTT等

二、数据传输方式
ActiveMQ支持的基础传输方式：VM、TCP、SSL、UDP、Peer、Multicast、HTTP（S）等，
以及更高级的Failover、Fanout、Discovery、ZeroConf方式

ActiveMQ的协议连接配置
在${ACTIVEMQ_HOME}/conf/activemq.xml中，通过配置<transportConnectors>就可以使用多种传输方式
<transportConnectors>
            <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->
            <transportConnector name="openwire" uri="tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="stomp" uri="stomp://0.0.0.0:61613?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="mqtt" uri="mqtt://0.0.0.0:1883?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="ws" uri="ws://0.0.0.0:61614?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
</transportConnectors>

ActiveMQ常用的传输方式及配置
tcp、udp、ssl、nio、vm、http

TCP
由于TCP具有可靠传输的特性，它在ActiveMQ中也是最常用使用的一种协议。在默认的配置中，TCP连接的端口为61616
TCP配置格式
tcp://hostname:port?key=value
TCP配置参数说明
在服务器端配置时，参数要以"transport."开头
示例：tcp://localhost:61616?transport.threadName&transport.trace=false&transport.soTimeout=60000
在客户端连接时，参数省略"transport."前缀
示例：tcp://localhost:61616?threadName&trace=false&soTimeout=60000

属性  默认值 描述
backlog 5000    指定传输服务器套接字等待接收的最大连接数
connectionTimeout   30000   超时时间，>=1时才有超时时间（单位为毫秒）为0表示没有超时，负值被忽略
daemon  false   如果为true，则传输线程将以守护进程模式运行，将代理嵌入Spring容器或Web容器中时，请将次参数设置为true，以允许容器正确关闭
dynamicManagement   false   如果为true，则可以通过JMX管理TransportLogger
ioBufferSize    8*1024  协议解析使用的缓冲区大小（非TCP缓冲区）
jmxPort 1099    （仅在客户端有效）JMX端口
keepAlive   false   如果为true，则在Broker连接上启用TCP KeepAlive，以防止连接在TCP级别超时，这不要和InactivityMonitor使用的KeepAliveInfo消息混淆
maximumConnections  Integer.MAX_VALUE   broker允许的最大socket数量
socketBufferSize    64*1024 设置接受套接字读写缓冲区的大小（以字节为单位）
soLinger    Integer.MIN_VALUE   当值>-1时，设置套接字的选项soLinger；设置为01时，将禁用soLinger套接字选项
soTimeout   0   设置套接字的读取超时，毫秒单位
soWriteTimeout  0   设置套接字的吸入超时，毫秒单位
stackSize   0   设置服务端后台读取线程的堆栈大小，必须以128k的倍数指定；值为0表示忽略此参数
startLogging    true    true，将传输信息TransportLogger对象写入日志，仅在trace=true的场景下生效
tcpNoDelay  false   如果为true，则设置套接字的选项TCP_NODELAY,这会金融Nagle的小数据包传输算法。
threadName  N/A     指定调用transport的线程名称。例如以服务器host命名，调试线程的时候可以看到
trace       false   为true时，服务器记录传输发送的所有命令内容。log4j.logger.org.apache.activemq.transport.TransportLogger=DEBUG
trafficClass    0   ip协议级别的服务质量参数。（0x02,0x04,0x08,0x10）
useInactivityMonitor    true    false，则禁用InactivityMonitor，连接永远不会超时
useKeepAlive    true    true，在空闲连接上发送KeepAliveInfo消息，防止它超时。false，指定的时间内没有接收到数据，连接超时。

SSL
需要一个安全连接的时候可以考虑使用SSL，使用与client和broker在公网的情况
如使用aws云平台等
http://activemq.apche.org/ssl-transport-reference.html
SSL配置格式，可配置参数和TCP相同
ssl://localhost:61616
SSL客户端配置
JMS客户端需要使用ActiveMQSslConnectionFactory类创建连接，brokerUrl以ssl://开头，以下是Spring配置示例
<bean id="AMQJMSConnectionFactory" class="org.apache.activemq.ActiveMQSslConnectionFactory">
<property name="trustStore" value="/path/to/truststore.ts"/>
<property name="trustStorePassword" value="password"/>
<property name="keyStore" value="/path/to/keystore.ks"/>
<property name="keyStorePassword" value="password"/>
<property name="brokerURL" value="ssl://localhost:61616"/>
<property name="userName" value="admin"/>
<property name="password" value="admin"/>
</bean>
SSL主机名验证
从ActiveMQ5.15.6开始，ActiveMQ开始支持TLS主机名验证，默认情况下客户端启用了该验证，而服务器端没有启用
服务器端配置
ssl://localhost:61616?transport.verifyHostName=true
客户端配置
ssl://localhost:61616?socket.verifyHostName=false
或者
ssl://localhost:61616?verifyHostName=false

NIO
使用Java的NIO方式对连接进行改进，因为NIO使用线程池，可以复用线程，所以可以用更少的线程维持更多的连接。
如果有大量的客户端，或者性能瓶颈在网络传输上，可以考虑使用NIO的连接方式。ActiveMQ默认使用BIO
NIO配置格式，可配置参数和TCP相同
nio://hostname:port?key=value
NIO是OpenWire协议的传输方式，其它协议，像AMQP、MQTT、Stomp，也有NIO的实现，通常在协议前缀中加“+nio来区别”
示例：mqtt+nio://localhost:1883
NIO传输线程使用情况配置
从5.15.0开始，ActiveMQ支持调整NIO的传输线程，可以设置以下属性
属性  默认值 描述
org.apache.activemq.transport.nio.SelectorManager.corePoolSize  10  核心线程池线程数
maximumPoolSize 1024    线程池最大线程数
workQueueCapacity   0   线程池队列容量
rejectWork  false   当达到容量时，允许使用IOException拒绝工作，以便可以保留现有的QOS
NIO传输线程使用情况配置
属性可以在${ACTIVEMQ_HOME}/bin/env中配置，示例：
ACTIVEMQ_OPTS="$ACTIVEMQ_OPTS
-Dorg.apache.activemq.transport.nio.SelectorManager.corePoolSize=2000
-Dorg.apache.activemq.transport.nio.SelectorManager.maximumPoolSize=2000
-Dorg.apache.activemq.transport.nio.SelectorManager.workQueueCapacity=1024"

NIO SSL
从ActiveMQ5.6版本开始，NIO可以支持和SSL搭配使用的传输连接
NIO+SSL配置格式，可配置参数和TCP相同
nio+ssl://0.0.0.0:61616

UDP
与面向连接，可靠的字节流服务的TCP不同，UDP是一个面向数据的简单传输连接，没有TCP的三次握手，所以性能大大强于TCP，
但是以牺牲可靠性为前提。适用于丢失也无所谓的消息
UDP配置格式
udp://localhost:8123
UDP配置参数说明
属性  默认值 描述
trace   false   为true时，将会记录传输发送的所有命令
useLocalHost    true    为true时，本机机器名被解析为localhost
datagramSize    4*1024  指定数据报的大小

HTTP(S)
需要穿越防火墙，可以考虑使用HTTP(S)，但由于HTTP(S)是短连接，每次创建连接的成本较高，所以性能最差。通过XML传输数据
HTTP配置格式
http://localhost:8080?param1=val1&param2=val2
HTTPS配置格式
https://localhost:8080?param1=val1&param2=val2

VM
虚拟机协议（方法直调），使用场景是client和broker在同一个Java虚拟机内嵌的情况，无需网络通信的开销
VM配置格式
vm://brokerName?marshal=false&broker.persistent=false
VM配置参数说明
属性  默认值 描述
create  true    如果不存在，则创建broker
waitForStart    -1  如果>0,则表示等待代理启动的超时（毫秒单位）。值-1和0表示不等待。仅在ActiveMQ5.2+支持
marshal false   强制发送的每个命令使用WireFormat进行格式转换

三、OpenWire协议(TCP默认协议)
Apache的一种跨语言协议，允许从不同的语言和平台访问ActiveMQ，是ActiveMQ4.X以后的版本默认的传输协议。
http://activemq.apache.org/openwire-version-2-specification.html
http://activemq.apache.org/wire-protocol.html
OpenWire支持TCP、SSL、NIO、UDP、VM等传输方式，直接配置这些连接，就是使用的OpenWire协议，
OpenWire有自己的配置参数，客户端和服务器端配置的参数名都通过前缀"wireFormat."表示
http://activemq.apache.org/configuring-wire-formats.html
示例：
tcp://localhost:61616?wireFormat.cacheEnabled=false&wireFormat.tightEncodingEnabled=false
客户端和服务端都通过前缀"wireFormat."表示
OpenWire的配置参数说明
属性  默认值 描述
stackTraceEnabled   true    是否应该把已经发生并且跟踪到的堆栈异常，通过broker发送到客户端
tcpNoDelayEnabled   true    socket的NoDelay参数
cachedEnabled   true    如果不断重复的进行缓存，以便少编组（马上要进行的发送）发生
tightEncodingEnabled    true    根据CPU使用情况，自动调整传输内容大小（压缩比例）
prefixPacketSize    true    在每个包被编组钱（马上要被发送），每个包的大小是否应该作为前缀
maxInactivityDuration   30000   连接的最大空闲时间，以毫秒为单位。broker服务会根据配置关闭超时的连接。同时也可以通过心跳机制来保持连接。值<=0则禁用活动连接的监测
maxInactivityDurationInitialDelay   10000   连接建立之后，多久开始进行超时检测
cacheSize   1024    如果能被缓存，那么这个规定了缓存的最大数量。此属性中在ActiveMQ的4.1中开始添加使用
maxFrameSize    MAX_LONG    可发送最大帧大小，可以帮助防止OOM DOS攻击


四、MQTT协议
Message Queuing Telemetry Transport 消息队列遥测传输是IBM开发的一个即时通讯协议，已成为物联网通信标准
结构简单，轻量级，适合计算能力有限，低带宽，不可靠的网络环境使用
MQTT服务质量
服务质量（Qos）级别是一种关于发送者和接收者之间信息投递的保证协议。MQTT有三种Qos级别：
0，1，2
至多一次0
至少一次1
只有一次2
为什么要有服务质量
Qos是MQTT的一个主要功能，它使得在不可靠网络下进行通信变得更为简单，因为即便在非常不可靠的网络下，
协议也可以掌控是否需要重发消息并保证消息到达。它也能帮助客户端根据网络环境和程序逻辑来自由选择QoS
QoS level0：例如上传日志，发一次不管失败成功
Qos level1：针对客户端发布消息到服务器的消息流/针对服务器发布到订阅者的消息流，
            例如客户端发数据，需要接收一个回执，说明消息处理过程中有应答机制，没收到会重发
Qos level2：客户端发送数据，服务端需要记录，并保证不存储同样的数据
默认开启MQTT协议
MQTT支持层次结构和通配符，但分隔符合ActiveMQ不同
            ActiveMQ        MQTT
分隔符         .               /
元素          *               +
子节点         >               #
示例：
主题名：foo.blash.bar¡
在MQTT的客户端订阅时，可以为foo/+/bar
在JMS订阅时，可以为foo.*.bar

Spring使用MQTT
Spring Integration提供了MQTT协议的支持，通过Maven添加依赖即可使用
<dependency>
    <groupId>org.springframework.integration</groupId>
    <artifactId>spring-integration-mqtt</artifactId>
    <version>5.1.1.RELEASE</version>
</dependency>
官方教程：https://docs.spring.io/spring-integration/reference/html/mqtt.html

五、AUTO协议
自动检测协议
从ActiveMQ 5.13.0开始，ActiveMQ开始支持协议格式检测，可以自动检测OpenWire、STOMP、AMQP和MQTT。
允许这4种类型的客户端共享一个传输
如何使用AUTO协议
AUTO使用TCP
<transportConnector name="auto" uri="auto://localhost:5671"/>
AUTO使用SSL
<transportConnector name="auto+ssl" uri="auto+ssl://localhost:5671">
AUTO使用NIO
<transportConnector name="auto+nio" uri="auto+nio://localhost:5671">
AUTO使用NIO+SSL
<transportConnector name="auto+nio+ssl" uri="auto+nio+ssl://localhost:5671">
