一、ActiveMQ支持哪些协议
ActiveMQ支持多种协议传输和传输方式，允许客户端使用多种协议连接
ActiveMQ支持的协议：AUTO、OpenWire、AMQP、Stomp、MQTT等

二、数据传输方式
ActiveMQ支持的基础传输方式：VM、TCP、SSL、UDP、Peer、Multicast、HTTP（S）等，
以及更高级的Failover、Fanout、Discovery、ZeroConf方式

ActiveMQ的协议连接配置
在${ACTIVEMQ_HOME}/conf/activemq.xml中，通过配置<transportConnectors>就可以使用多种传输方式
<transportConnectors>
            <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->
            <transportConnector name="openwire" uri="tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="stomp" uri="stomp://0.0.0.0:61613?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="mqtt" uri="mqtt://0.0.0.0:1883?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="ws" uri="ws://0.0.0.0:61614?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
</transportConnectors>

ActiveMQ常用的传输方式及配置
tcp、udp、ssl、nio、vm、http

TCP
由于TCP具有可靠传输的特性，它在ActiveMQ中也是最常用使用的一种协议。在默认的配置中，TCP连接的端口为61616
TCP配置格式
tcp://hostname:port?key=value
TCP配置参数说明
在服务器端配置时，参数要以"transport."开头
示例：tcp://localhost:61616?transport.threadName&transport.trace=false&transport.soTimeout=60000
在客户端连接时，参数省略"transport."前缀
示例：tcp://localhost:61616?threadName&trace=false&soTimeout=60000

属性  默认值 描述
backlog 5000    指定传输服务器套接字等待接收的最大连接数
connectionTimeout   30000   超时时间，>=1时才有超时时间（单位为毫秒）为0表示没有超时，负值被忽略
daemon  false   如果为true，则传输线程将以守护进程模式运行，将代理嵌入Spring容器或Web容器中时，请将次参数设置为true，以允许容器正确关闭
dynamicManagement   false   如果为true，则可以通过JMX管理TransportLogger
ioBufferSize    8*1024  协议解析使用的缓冲区大小（非TCP缓冲区）
jmxPort 1099    （仅在客户端有效）JMX端口
keepAlive   false   如果为true，则在Broker连接上启用TCP KeepAlive，以防止连接在TCP级别超时，这不要和InactivityMonitor使用的KeepAliveInfo消息混淆
maximumConnections  Integer.MAX_VALUE   broker允许的最大socket数量
socketBufferSize    64*1024 设置接受套接字读写缓冲区的大小（以字节为单位）
soLinger    Integer.MIN_VALUE   当值>-1时，设置套接字的选项soLinger；设置为01时，将禁用soLinger套接字选项
soTimeout   0   设置套接字的读取超时，毫秒单位
soWriteTimeout  0   设置套接字的吸入超时，毫秒单位
stackSize   0   设置服务端后台读取线程的堆栈大小，必须以128k的倍数指定；值为0表示忽略此参数
startLogging    true    true，将传输信息TransportLogger对象写入日志，仅在trace=true的场景下生效
tcpNoDelay  false   如果为true，则设置套接字的选项TCP_NODELAY,这会金融Nagle的小数据包传输算法。
threadName  N/A     指定调用transport的线程名称。例如以服务器host命名，调试线程的时候可以看到
trace       false   为true时，服务器记录传输发送的所有命令内容。log4j.logger.org.apache.activemq.transport.TransportLogger=DEBUG
trafficClass    0   ip协议级别的服务质量参数。（0x02,0x04,0x08,0x10）
useInactivityMonitor    true    false，则禁用InactivityMonitor，连接永远不会超时
useKeepAlive    true    true，在空闲连接上发送KeepAliveInfo消息，防止它超时。false，指定的时间内没有接收到数据，连接超时。

SSL
需要一个安全连接的时候可以考虑使用SSL，使用与client和broker在公网的情况
如使用aws云平台等
http://activemq.apche.org/ssl-transport-reference.html
SSL配置格式，可配置参数和TCP相同
ssl://localhost:61616


三、OpenWire协议
Apache的一种跨语言协议，允许从不同的语言和平台访问ActiveMQ，是ActiveMQ4.X以后的版本默认的传输协议。
客户端和服务端都通过前缀"wireFormat."表示

四、MQTT协议
Message Queuing Telemetry Transport 消息队列遥测传输是IBM开发的一个即时通讯协议，已成为物联网通信标准
结构简单，轻量级，适合计算能力有限，低带宽，不可靠的网络环境使用
MQTT服务质量
服务质量（Qos）级别是一种关于发送者和接收者之间信息投递的保证协议。MQTT有三种Qos级别：
0，1，2
至多一次0
至少一次1
只有一次2
为什么要有服务质量
Qos是MQTT的一个主要功能，它使得在不可靠网络下进行通信变得更为简单，因为即便在非常不可靠的网络下，
协议也可以掌控是否需要重发消息并保证消息到达。它也能帮助客户端根据网络环境和程序逻辑来自由选择QoS
QoS level0：例如上传日志，发一次不管失败成功
Qos level1：针对客户端发布消息到服务器的消息流/针对服务器发布到订阅者的消息流，
            例如客户端发数据，需要接收一个回执，说明消息处理过程中有应答机制，没收到会重发
Qos level2：客户端发送数据，服务端需要记录，并保证不存储同样的数据
默认开启MQTT协议
MQTT支持层次结构和通配符，但分隔符合ActiveMQ不同
            ActiveMQ        MQTT
分隔符         .               /
元素          *               +
子节点         >               #
示例：
主题名：foo.blash.bar¡
在MQTT的客户端订阅时，可以为foo/+/bar
在JMS订阅时，可以为foo.*.bar

Spring使用MQTT
Spring Integration提供了MQTT协议的支持，通过Maven添加依赖即可使用
<dependency>
    <groupId>org.springframework.integration</groupId>
    <artifactId>spring-integration-mqtt</artifactId>
    <version>5.1.1.RELEASE</version>
</dependency>
官方教程：https://docs.spring.io/spring-integration/reference/html/mqtt.html

五、AUTO协议
自动检测协议
从ActiveMQ 5.13.0开始，ActiveMQ开始支持协议格式检测，可以自动检测OpenWire、STOMP、AMQP和MQTT。
允许这4种类型的客户端共享一个传输
如何使用AUTO协议
AUTO使用TCP
<transportConnector name="auto" uri="auto://localhost:5671"/>
AUTO使用SSL
<transportConnector name="auto+ssl" uri="auto+ssl://localhost:5671">
AUTO使用NIO
<transportConnector name="auto+nio" uri="auto+nio://localhost:5671">
AUTO使用NIO+SSL
<transportConnector name="auto+nio+ssl" uri="auto+nio+ssl://localhost:5671">
